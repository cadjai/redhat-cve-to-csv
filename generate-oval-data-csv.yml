- name: 'Generate CVRF Data CSV'
  hosts: localhost
  become: yes
  vars_files:
  vars:
    #ansible_python_interpreter: /usr/bin/python3
    module: "generate-rhsa-cvrf-csv"
    oval_data_api_url: "https://access.redhat.com/hydra/rest/securitydata/oval.json"
    cvrf_data_api_url: "https://access.redhat.com/hydra/rest/securitydata/cvrf.json"
    rhsa_bugzilla_url_prefix: "https://bugzilla.redhat.com/show_bug.cgi?id="
    rhsa_cve_url_prefix: "https://access.redhat.com/security/cve/"
    remediation_separator: '&CHAR(10)&CHAR(10)&'
    ansible_name_module: " Konductor | Provision UPI Infra | {{ module }}"

  pre_tasks:
    - name: '{{ ansible_name_module }} | Verify Required variables are correctly set '
      when:
        - rhsa_file is not defined or rhsa_file == ''
        - rhsa_list is not defined or rhsa_list == ''
        - oval_after_date is not defined or oval_after_date == ''
      block:
        - name: '{{ ansible_name_module }} | Verify Required variables are correctly set '
          fail:
            msg: "The variable rhsa_list or rhsa_file or oval_after_date cannot be undefined or empty"

  tasks:
    ############################### Process oval data by RHSA List ############################################################
    ### It is assume that either rhsa_file or rhsa_file is defined and not empty
    - name: '{{ ansible_name_module }} | load  rhsa file into rhsa list '
      when:
        - rhsa_file is defined
        - not rhsa_file == ''
      block:
        - name: '{{ ansible_name_module }} | ensure rhsa_file is a valid file and exists '
          stat:
            path: "{{ rhsa_file }}"
          register: rhsa_file_check

        - name: '{{ ansible_name_module }} | load  rhsa_file if it exsists'
          set_fact:
            rhsa_list: "{{ rhsa_list | default([]) + [item] }}"
          loop: "{{ lookup('file', rhsa_file).splitlines() }}"
          register: rhsa_list_loaded

    - name: '{{ ansible_name_module }} | set_fact rhsa_file if it does not exsist'
      set_fact:
        rhsa_data_result_file: "/tmp/rhsa-oval-data-results-{{ lookup('pipe','date +%Y%m%d%H%M%S') }}.csv"
      when:
        - rhsa_data_result_file is undefined or rhsa_data_result_file == ''

    - name: '{{ ansible_name_module }} | retrieve rhsa info '
      when:
        - rhsa_list is defined
        - not rhsa_list == ''
      block:
        - name: '{{ ansible_name_module }} | Get raw rhsa data '
          shell: >
            curl -s -G -d "rhsa_ids={{ rhsa_list | join(',') }}"  {{ oval_data_api_url }} | jq .
          args:
            warn: no
          register: oval_raw_rhsa


    ############################### Process oval data by data range ############################################################
    ### It is assume that the date after oval_after_date is valid . If the before date is defined it is aslo assumed that it is valid
    - name: '{{ ansible_name_module }} | load  oval data for date range '
      when:
        - not rhsa_file is defined or rhsa_file == ''
        - oval_after_date is defined
        - oval_after_date != ''
      block:
        - name: '{{ ansible_name_module }} | set_fact oval_before_date if not set '
          set_fact:
            after_d: "{{ ((oval_after_date | to_datetime('%Y-%m-%d')) | string).split(' ')[0] }}"
          ignore_errors: yes
          register: date_check

        - name: '{{ ansible_name_module }} | Verify Required date correctly set '
          fail:
            msg: "The variable oval_after_date has to be set to a valid date in the format YYYY-MM-DD and cannot be undefined or empty"
          when:
            - date_check is defined
            - date_check.failed is defined
            - date_check.failed | bool
            - not after_d is defined or after_d == ''

        - name: '{{ ansible_name_module }} | set_fact oval_before_date if not set '
          set_fact:
            before_d: "{{ ((oval_before_date | to_datetime('%Y-%m-%d')) | string).split(' ')[0] }}"
          ignore_errors: yes
          when:
            - oval_before_date is defined
            - oval_before_date != ''
          register: dateb_check

        - name: '{{ ansible_name_module }} | set_fact oval_before_date if not set '
          set_fact:
            oval_before_date: "{{ ansible_date_time.date }}"
          when:
            - (not oval_before_date is defined) or (oval_before_date == '') or not (dateb_check is defined and dateb_check.failed is defined and dateb_check.failed | bool and (not before_d is defined or before_d == ''))

              #curl -s -G -d "before={{ oval_before_date }}" -d "after={{ oval_after_date}}" {{ oval_data_api_url }} | jq .
        - name: '{{ ansible_name_module }} | Get raw rhsa data '
          shell: >
            curl -s -G -d "before={{ before_d }}" -d "after={{ after_d }}" {{ oval_data_api_url }} | jq .
          args:
            warn: no
          register: oval_raw_date


    ############################### Process Retrieve oval data from one of the steps above  ##########################################
    ############################
    - name: '{{ ansible_name_module }} | Process retrieved oval data '
      when:
        - (oval_raw_rhsa is defined and oval_raw_rhsa.rc is defined and oval_raw_rhsa.rc == 0 and oval_raw_rhsa.stdout is defined and oval_raw_rhsa.stdout != '') or (oval_raw_date is defined and oval_raw_date.rc is defined and oval_raw_date.rc == 0 and oval_raw_date.stdout is defined and oval_raw_date.stdout != '')
      block:
        - name: '{{ ansible_name_module }} | set RHSA data json var'
          set_fact:
            oval_data_json: "{{ oval_raw_rhsa.stdout | from_json | list }}"
          when:
            - oval_raw_rhsa is defined
            - oval_raw_rhsa.rc is defined
            - oval_raw_rhsa.rc == 0
            - oval_raw_rhsa.stdout is defined
            - oval_raw_rhsa.stdout != ''
          register: oval_data_json_facts

        - name: '{{ ansible_name_module }} | set RHSA data json var'
          set_fact:
            oval_data_json: "{{ oval_raw_date.stdout | from_json | list }}"
          when:
            - oval_raw_date is defined
            - oval_raw_date.rc is defined
            - oval_raw_date.rc == 0
            - oval_raw_date.stdout is defined
            - oval_raw_date.stdout != ''
          register: oval_data_json_facts

        - name: '{{ ansible_name_module }} | set RHSA data lines var'
          set_fact:
            oval_data_json_clean: "{{ oval_data_json_clean | default([]) + \
                     [{'rhsa': item.RHSA | replace(',',' ') | quote, \
                     'severity': item.severity | replace(',',' ') | quote, \
                     'released_date': item.released_on.split('T')[0] | quote, \
                     'rhsa_url': item.resource_url | replace(',',' ') | quote, \
                     'cves': item.CVEs | replace(',',' ') | replace('\n',' ') | replace('\\t',' ') | replace('[','') | replace(']','') | replace('\"','') , \
                     'bugzillas': item.bugzillas | replace(',',' ') | replace('\n',' ') | replace('\\t',' ') | replace('[','') | replace(']','') | replace('\"','') , \
                                                                                                                                                             'cve_urls': ( [rhsa_cve_url_prefix] | product((item.CVEs | list)) | map('join') | list | string )  | replace('[','') | replace(']','') | replace('\"','') | replace(',',' '), \
                                                                                                                                                             'bugzilla_urls': ( [rhsa_bugzilla_url_prefix] |  product(item.bugzillas | list) | map('join') | list | string )  | replace('[','') | replace(']','') | replace('\"','') | replace(',',' ') \
                     }] }}"
          loop: "{{ oval_data_json }}"
          loop_control:
            index_var: idx
          register: oval_data_json_facts_clean

        - name: '{{ ansible_name_module }} | set rhsa data lines var'
          set_fact:
            oval_data_csv: "{{ oval_data_csv | default([]) \
                           + [item.rhsa + ',' \
                           + item.severity + ',' \
                           + item.rhsa_url + ',' \
                           + item.released_date + ',' \
                           + item.cves + ',' \
                           + item.cve_urls + ',' \
                           + item.bugzillas + ',' \
                           + item.bugzilla_urls \
                           ] }}"
          loop: "{{  oval_data_json_clean }}"
          register: oval_data_csv_facts

        - name: '{{ ansible_name_module }} | convert to csv '
          template:
            src: "templates/oval-data-csv.j2"
            dest: "{{ rhsa_data_result_file }}"
            force: yes
          register: oval_tsv

