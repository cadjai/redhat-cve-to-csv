#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: 'Generate CVE Data CSV'
  hosts: localhost
  become: yes
  vars_files:
  vars:
    #ansible_python_interpreter: /usr/bin/python3
    module: "generate-cve-csv"
    cve_data_api_url: "https://access.redhat.com/hydra/rest/securitydata/cve"
    cve_data_url_prefix: "https://access.redhat.com/security/cve"
    remediation_separator: '&CHAR(10)&CHAR(10)&'
    ansible_name_module: " Konductor | Provision UPI Infra | {{ module }}"
    affected_release_strg: ', affected_release: [.affected_release[] | [ ([.product_name] | join(";")), ([.release_date] | join(";")), ([.advisory] | join(";")), ([.cpe] | join(";")) ] | @tsv ]'
    package_state_strg: ', state: [.package_state[] | [ ([.product_name] | join(";")), ([.fix_state] | join(";")) , ([.package_name] | join(";")) ] | @tsv ] '
    statement: ', statement: .statement'
    mitigation: ', mitigation: .mitigation.value'
    mitigation_column_sign: '='
    mitigation_column_detail: 'F'
    mitigation_column_statement: 'G'
    mitigation_column_mitigation: 'H'
    mitigation_column_state: 'J'
    mitigation_column_public_date: 'M'
    mitigation_column_affected_release: 'N'


  pre_tasks:
    - name: '{{ ansible_name_module }} | load  | Login to quay container registry'
      fail:
        msg: "The variable cve_list or cve_file cannot be undefined or empty"
      when:
        - cve_file is not defined or cve_file == ''
        - cve_list is not defined or cve_list == ''
  tasks:
    - name: '{{ ansible_name_module }} | load  cve file into cve list '
      when:
        - cve_file is defined
        - not cve_file == ''
      block:
        - name: '{{ ansible_name_module }} | ensure cve_file is a valid file and exists '
          stat:
            path: "{{ cve_file }}"
          register: cve_file_check

        - name: '{{ ansible_name_module }} | load  cve_file if it exsists'
          set_fact:
            cve_list: "{{ cve_list | default([]) + [item] }}"
          loop: "{{ lookup('file', cve_file).splitlines() }}"
          register: cve_list_loaded

    - name: '{{ ansible_name_module }} | load  cve_file if it exsists'
      set_fact:
        cve_data_result_file: "/tmp/cve-data-results.csv"
      when:
        - cve_data_result_file is undefined or cve_data_result_file == ''

    - name: '{{ ansible_name_module }} | retrieve cve info '
      when:
        - cve_list is defined
        - not cve_list == ''
      block:
        - name: '{{ ansible_name_module }} | Get raw cve data '
          shell: >
            curl -s {{ cve_data_api_url }}/{{ item | upper }} \
              | jq .
          args:
            warn: no
          loop: "{{ cve_list }}"
          register: cve_raw

        - name: '{{ ansible_name_module }} | Print output '
          debug:
            var: (item.stdout | from_json).name
          loop: "{{ cve_raw.results }}"

        - name: '{{ ansible_name_module }} | Process cve data '
          shell: >
            curl -s {{ cve_data_api_url }}/{{ (item.stdout | from_json).name }} \
            | jq '.| {cve: .name, severity: .threat_severity, public_date: .public_date, cvss_score: .cvss3.cvss3_base_score, csaw: .csaw, cwe: .cwe, details: [.details | join(";")], acknowledgement: .acknowledgement {{ statement_strg }} {{ mitigation_strg }} {{ pkg_state_strg }} {{ release_strg }} | join(";") }'
          args:
            warn: no
          loop: "{{ cve_raw.results }}"
          vars:
            mitigation_strg: "{{ mitigation if 'mitigation' in (item.stdout | from_json) else '' }}"
            statement_strg: "{{ statement if 'statement' in (item.stdout | from_json) else '' }}"
            release_strg: "{{ affected_release_strg if 'affected_release' in (item.stdout | from_json) else '' }}"
            pkg_state_strg: "{{ package_state_strg if 'package_state' in (item.stdout | from_json) else '' }}"
          when:
            - "not 'No match found' in item.stdout"
          register: cve_csv_created

        - name: '{{ ansible_name_module }} | set cve data json var'
          set_fact:
            cve_data_json: "{{ cve_data_json | default([]) + [item.stdout | from_json] }}"
          loop: "{{ cve_csv_created.results }}"  
          when:
            - item.changed is defined and item.changed | bool
          register: cve_data_json_facts

        - name: '{{ ansible_name_module }} | set cve data lines var'
          set_fact:
            cve_data_json_clean: "{{ cve_data_json_clean | default([]) + \ 
                     [{'cve': item.cve | replace(',',' ') | quote, \
                     'severity': item.severity | replace(',',' ') | quote, \
                     'cvss_score': item.cvss_score | replace(',',' ') | quote, \
                     'csaw': item.csaw | replace(',',' ') | quote, \
                     'cwe': item.cwe | replace(',',' ') | quote, \
                     'details': item.details | join(';') | replace(',',' ') | quote, \ 
                     'statement': item.statement | default(none) | replace(',',' ') | replace('\n','') | quote, \
                     'mitigation': item.mitigation | default(none) | replace(',',' ') | replace('\n','') | replace('~',''), \
                     'acknowledgement': item.acknowledgement | default(none) | replace(',',' ') | quote, \
                     'state': item.state | default(none) | replace(',',' ') | replace('[','') | replace(']','') | replace('\"','') , \ 
                     'cve_url': cve_data_url_prefix + '/' + item.cve | quote, \
                     'rh_ridx': ((idx +2)| int | quote), \
                     'public_date': item.public_date.split('T')[0] | quote, \
                     'affected_release': item.affected_release | default(none)  | replace(',',' ') | quote
                     }] }}" 
          loop: "{{ cve_data_json }}"  
          loop_control:
            index_var: idx
          register: cve_data_json_facts_clean

        - name: '{{ ansible_name_module }} | set cve data lines var'
          set_fact:
            cve_data_csv: "{{ cve_data_csv | default([]) \
                           + [item.cve + ',' \
                           + item.severity + ',' \
                           + item.cvss_score + ',' \
                           + item.csaw + ',' \
                           + item.cwe + ',' \
                           + item.details + ',' \
                           + item.statement + ',' \
                           + item.mitigation + ',' \
                           + item.acknowledgement + ',' \
                           + item.state + ',' \
                           + item.cve_url + ',' \
                           + mitigation_column_sign \
                              + mitigation_column_public_date \
                              + item.rh_ridx \
                              + remediation_separator \
                              + mitigation_column_affected_release \
                              + item.rh_ridx \
                              + remediation_separator \
                              + mitigation_column_detail \
                              + item.rh_ridx \
                              + remediation_separator \
                              + mitigation_column_statement \
                              + item.rh_ridx \
                              + remediation_separator \
                              + mitigation_column_mitigation \
                              + item.rh_ridx \
                              + remediation_separator \
                              + mitigation_column_state \
                              + item.rh_ridx \
                              + ',' \
                           + item.public_date + ',' \
                           + item.affected_release
                           ] }}"
          loop: "{{  cve_data_json_clean }}"  
          register: cve_data_csv_facts

        - name: '{{ ansible_name_module }} | convert to csv '
          template:
            src: "templates/cve-date-csv.j2" 
            dest: "{{ cve_data_result_file }}"
          register: cve_tsv

