- name: 'Generate CVRF Data CSV'
  hosts: localhost
  become: yes
  vars_files:
  vars:
    #ansible_python_interpreter: /usr/bin/python3
    module: "generate-cve-csv"
    cvrf_data_api_url: "https://access.redhat.com/hydra/rest/securitydata/cvrf.json"
    rhsa_data_api_url: "https://access.redhat.com/hydra/rest/securitydata/cve"
    rhsa_bugzilla_url_prefix: "https://bugzilla.redhat.com/show_bug.cgi?id="
    rhsa_cve_url_prefix: "https://access.redhat.com/security/cve/"
    remediation_separator: '&CHAR(10)&CHAR(10)&'
    ansible_name_module: " Konductor | Provision UPI Infra | {{ module }}"
    mitigation_column_sign: '='
    mitigation_column_detail: 'F'
    mitigation_column_statement: 'G'
    mitigation_column_mitigation: 'H'
    mitigation_column_state: 'J'
    mitigation_column_public_date: 'M'
    mitigation_column_affected_release: 'N'
    mitigation_column_advisory: 'O'

  pre_tasks:
    - name: '{{ ansible_name_module }} | Verify Required variables are correctly set '
      fail:
        msg: "The variable rhsa_list or rhsa_file cannot be undefined or empty"
      when:
        - rhsa_file is not defined or rhsa_file == ''
        - rhsa_list is not defined or rhsa_list == ''

  tasks:
    - name: '{{ ansible_name_module }} | load  cve file into cve list '
      when:
        - rhsa_file is defined
        - not rhsa_file == ''
      block:
        - name: '{{ ansible_name_module }} | ensure rhsa_file is a valid file and exists '
          stat:
            path: "{{ rhsa_file }}"
          register: rhsa_file_check

        - name: '{{ ansible_name_module }} | load  rhsa_file if it exsists'
          set_fact:
            rhsa_list: "{{ rhsa_list | default([]) + [item] }}"
          loop: "{{ lookup('file', rhsa_file).splitlines() }}"
          register: rhsa_list_loaded

    - name: '{{ ansible_name_module }} | set_fact rhsa_file if it does not exsist'
      set_fact:
        rhsa_data_result_file: "/tmp/rhsa-data-results-{{ lookup('pipe','date +%Y%m%d%H%M%S') }}.csv"
      when:
        - rhsa_data_result_file is undefined or rhsa_data_result_file == ''

    - name: '{{ ansible_name_module }} | retrieve cve info '
      when:
        - rhsa_list is defined
        - not rhsa_list == ''
      block:
        - name: '{{ ansible_name_module }} | Get raw cve data '
          shell: >
            curl -s -G -d "rhsa_ids={{ rhsa_list | join(',') }}"  {{ cvrf_data_api_url }} | jq .
          args:
            warn: no
          register: rhsa_raw

        - name: '{{ ansible_name_module }} | Print output '
          debug:
            var: (rhsa_raw.stdout | from_json)

        - name: '{{ ansible_name_module }} | set RHSA data json var'
          set_fact:
            rhsa_data_json: "{{ rhsa_raw.stdout | from_json | list }}"
          when:
            - rhsa_raw is defined
            - rhsa_raw.rc is defined
            - rhsa_raw.rc == 0
            - rhsa_raw.stdout is defined
            - rhsa_raw.stdout != ''
          register: rhsa_data_json_facts

        - name: '{{ ansible_name_module }} | Print output Json data'
          debug:
            var: rhsa_data_json

        - name: '{{ ansible_name_module }} | Print output Json Data Facts'
          debug:
            var: rhsa_data_json_facts

        - name: '{{ ansible_name_module }} | Print output Json data each'
          debug:
            var: item
          loop: "{{ rhsa_data_json }}"

        - name: '{{ ansible_name_module }} | set cve data lines var'
          set_fact:
            rhsa_data_json_clean: "{{ rhsa_data_json_clean | default([]) + \
                     [{'rhsa': item.RHSA | replace(',',' ') | quote, \
                     'severity': item.severity | replace(',',' ') | quote, \
                     'released_date': item.released_on.split('T')[0] | quote, \
                     'rhsa_url': item.resource_url | replace(',',' ') | quote, \
                     'oval': item.oval.resource_url | replace(',',' ') | replace('\n',' ') | replace('{', '') | replace('}', '') | replace(',',' ') | quote, \
                     'cves': item.CVEs | replace(',',' ') | replace('\n',' ') | replace('\\t',' ') | replace('[','') | replace(']','') | replace('\"','') , \
                     'bugzillas': item.bugzillas | replace(',',' ') | replace('\n',' ') | replace('\\t',' ') | replace('[','') | replace(']','') | replace('\"','') , \
                     'packages': item.released_packages | replace(',',' ') | replace('\n',' ') | replace('\\t',' ') | replace('[','') | replace(']','') | replace('\"','') \
                     }] }}"
          loop: "{{ rhsa_data_json }}"
          loop_control:
            index_var: idx
          register: rhsa_data_json_facts_clean

        - name: '{{ ansible_name_module }} | Print output Json Data Clean'
          debug:
            var: rhsa_data_json_clean


        - name: '{{ ansible_name_module }} | set cve data lines var'
          set_fact:
            rhsa_data_csv: "{{ rhsa_data_csv | default([]) \
                           + [item.rhsa + ',' \
                           + item.severity + ',' \
                           + item.rhsa_url + ',' \
                           + item.oval + ',' \
                           + item.released_date + ',' \
                           + item.cves + ',' \
                           + item.bugzillas + ',' \
                           + item.packages
                           ] }}"
          loop: "{{  rhsa_data_json_clean }}"
          register: rhsa_data_csv_facts

        - name: '{{ ansible_name_module }} | convert to csv '
          template:
            src: "templates/cvrf-data-csv.j2"
            dest: "{{ rhsa_data_result_file }}"
            force: yes
          register: rhsa_tsv
