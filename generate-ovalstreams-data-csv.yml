- name: 'Generate CVRF Data CSV'
  hosts: localhost
  become: yes
  vars_files:
  vars:
    #ansible_python_interpreter: /usr/bin/python3
    module: "generate-rhsa-cvrf-csv"
    ovalstream_data_api_url: "https://access.redhat.com/hydra/rest/securitydata/oval/ovalstreams.json"
    cvrf_data_api_url: "https://access.redhat.com/hydra/rest/securitydata/cvrf.json"
    rhsa_bugzilla_url_prefix: "https://bugzilla.redhat.com/show_bug.cgi?id="
    rhsa_cve_url_prefix: "https://access.redhat.com/security/cve/"
    remediation_separator: '&CHAR(10)&CHAR(10)&'
    ansible_name_module: " Konductor | Provision UPI Infra | {{ module }}"

  pre_tasks:
    - name: '{{ ansible_name_module }} | Verify Required variables are correctly set '
      when:
        - product_label is not defined or product_label == ''
        - oval_after_date is not defined or oval_after_date == ''
        - oval_all is not defined or not oval_all | bool
      block:
        - name: '{{ ansible_name_module }} | Verify Required variables are correctly set '
          fail:
            msg: "The variable product_label (e.g. jboss-eap-6) or oval_after_date or oval_all (for all streams) cannot be undefined or empty"

  tasks:
    - name: '{{ ansible_name_module }} | set_fact rhsa_file if it does not exsist'
      set_fact:
        ovalstream_data_result_file: "/tmp/ovalstream-data-results-{{ lookup('pipe','date +%Y%m%d%H%M%S') }}.csv"
      when:
        - ovalstream_data_result_file is undefined or ovalstream_data_result_file == ''

    - name: '{{ ansible_name_module }} | format date if passed in '
      when:
        - oval_after_date is defined
        - oval_after_date != ''
        - not oval_all is defined or not oval_all | bool
      block:
        - name: '{{ ansible_name_module }} | set_fact date format '
          set_fact:
            after_d: "{{ ((oval_after_date | to_datetime('%Y-%m-%d')) | string).split(' ')[0] }}"
          ignore_errors: yes
          register: date_check

        - name: '{{ ansible_name_module }} | Verify Required date correctly set '
          fail:
            msg: "The variable oval_after_date has to be set to a valid date in the format YYYY-MM-DD and cannot be undefined or empty"
          when:
            - date_check is defined
            - date_check.failed is defined
            - date_check.failed | bool
            - not after_d is defined or after_d == ''

    - name: '{{ ansible_name_module }} | set_fact plabel '
      set_fact:
        plabel: "{{ product_label | d(none, true) }}"

    - name: '{{ ansible_name_module }} | Overwrite plabel if oval_all is set '
      set_fact:
        plabel: ""
      when:
        - oval_all is defined
        - oval_all | bool
        - product_label is defined
        - product_label != ''

    - name: '{{ ansible_name_module }} | retrieve ovalstreams info '
      shell: >
        curl -s -G {{ label_strg }} {{ after_strg }} {{ ovalstream_data_api_url }} | jq .
      args:
        warn: no
      vars:
        label_strg: "{{ ('-d label=' + plabel) if plabel is defined and plabel != '' else '' }}"
        after_strg: "{{ ('-d after=' + after_d) if after_d is defined and after_d != '' else '' }}"
      register: ovals_raw


    ############################### Process Retrieve oval data from one of the steps above  ##########################################
    ############################
    - name: '{{ ansible_name_module }} | Process retrieved oval data '
      when:
        - ovals_raw is defined
        - ovals_raw.rc is defined
        - ovals_raw.rc == 0
        - ovals_raw.stdout is defined
        - ovals_raw.stdout != ''
      block:
        - name: '{{ ansible_name_module }} | set Ovalstreams data json var'
          set_fact:
            ovals_data_json: "{{ ovals_raw.stdout | from_json | list }}"
          register: ovals_data_json_facts

        - name: '{{ ansible_name_module }} | set RHSA data lines var'
          set_fact:
            ovals_data_json_clean: "{{ ovals_data_json_clean | default([]) + \
                     [{'stream': item.stream | replace(',',' ') | quote, \
                     'product': item.label | replace(',',' ') | quote, \
                     'ostream_url': item.resourceUrl | replace(',',' ') | quote, \
                     'updated_date': item.lastModified.split('T')[0] | quote, \
                     'file_size': item.fileSize | replace(',',' ') | quote, \
                     'sha256sum': item.sha256sum | replace(',',' ') | quote \
                     }] }}"
          loop: "{{ ovals_data_json }}"
          loop_control:
            index_var: idx
          register: ovals_data_json_facts_clean

        - name: '{{ ansible_name_module }} | set rhsa data lines var'
          set_fact:
            ovals_data_csv: "{{ ovals_data_csv | default([]) \
                           + [item.stream + ',' \
                           + item.product + ',' \
                           + item.ostream_url + ',' \
                           + item.updated_date + ',' \
                           + item.file_size + ',' \
                           + item.sha256sum  \
                           ] }}"
          loop: "{{  ovals_data_json_clean }}"
          register: ovals_data_csv_facts

        - name: '{{ ansible_name_module }} | convert to csv '
          template:
            src: "templates/ovalstream-data-csv.j2"
            dest: "{{ ovalstream_data_result_file }}"
            force: yes
          register: oval_tsv

